#!/usr/bin/env ruby

CONVERSION_MAP = [
  ['.', 'B', '+', '*', '#', 'T', 'P', '$', 'X' ],
  ['.', 'O', '\'', '/', '3', '8', ';', ']', 'X' ],
]

INVERSION_MAP = [
  ['.', 'O', '\'', '/', '3', '8', ';', ']', 'X' ],
  ['>', 'B', '"', '?', '#', '0', ':', '[', 'X' ]
]

def invert(string, map: INVERSION_MAP)
  string.chars.inject("") do |inversion, char|
    if index = map[0].index(char)
      inversion << map[1][index]
    elsif index = map[1].index(char)
      inversion << map[0][index]
    else
      inversion << char
    end

    inversion
  end
end

def convert(string)
  invert(string, map: CONVERSION_MAP)
end

ARGV.each do |filename|
  puts filename
  level_file = File.open(filename, 'r')
  level = level_file.read

  # regular expressions
  # preamble: until the term 'message' or two newlines not followed by a '(' or EOF
  preamble = '(?<preamble>.*?(\nmessage|\n\n(?!\()|\Z))'
  map = '(?<map>\n*.*?(\Z|\n\n))'
  solutions = '(?<solutions>\( Solutions \).*)?'

  match = level.match(/#{ preamble }#{ map }#{ solutions }/m)

  map = match[:map]

  puts "pre: #{ match[:preamble] }"
  puts "map: #{ match[:map] }"
  puts "con: #{ convert(map) }"
#  puts convert(map)
  puts "sol: #{ match[:solutions] }"

  level_file.reopen(filename, 'w')
  level_file.write("#{ match[:preamble] }#{ match[:map] }#{ match[:solutions] }")
end


