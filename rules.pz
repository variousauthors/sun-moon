title Sun-Moon
author arrogant.gamer
homepage www.arrogantgamer.com

norepeat_action

========
OBJECTS
========

( Purple )

APlayerOn
#5D475D
00000
00000
00.00
00000
00000

APlayerOff
transparent

ATarget
#5D475D
.....
.....
..0..
.....
.....

AFloor
#928192

AWall
#341A34

( Brown )

BPlayerOn
#907E6D
00000
00000
00.00
00000
00000

BPlayerOff
transparent

BTarget
#907E6D
.....
.....
..0..
.....
.....

BFloor
#E1D4C7

BWall
#503C27

( utility objects )

Background
gray

ABlack
black

BBlack
black

=======
LEGEND
=======

APlayer = APlayerOn or APlayerOff
BPlayer = BPlayerOn or BPlayerOff

Player = APlayerOn or BPlayerOn
PlayerOff = APlayerOff or BPlayerOff
Floor = AFloor or BFloor
Wall = AWall or BWall
Target = ATarget or BTarget
Black = ABlack or BBlack

(
It seems strange that everything is organized as APlayer then BPlayer yet
the starting player is B.

Also what's the motivation for picking some of the symbols? Like BPlayer is B but APlayer is T? Also a mix of
symbols and a letter for the targets. Would be nice if there was a clear pattern so it was easy to make and understand
maps. Something like A -> 1 and B -> 2 as targets in their own worlds. If their target is in the other's world then
A -> ! or B -> @.
)
. = BFloor
B = BFloor and BPlayerOn
+ = BFloor and BTarget
* = BFloor and ATarget

# = BWall
T = BWall and APlayerOff
P = BWall and BTarget
$ = BWall and ATarget

X = BBlack

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Floor
AWall, APlayer, ABlack
BWall, BPlayer, BBlack
Target

======
RULES
======

( when the player presses 'x', switch paradigms )

[ action APlayerOn ] [ ABlack ] -> [ action APlayerOn ] [ BBlack ]
[ action APlayerOn ] [ AWall ] -> [ action APlayerOn ] [ BFloor ]
[ action APlayerOn ] [ AFloor ] -> [ action APlayerOn ] [ BWall ]
[ action APlayerOn ] [ BPlayerOff ] -> [ APlayerOff ] [ BPlayerOn ]
[ action BPlayerOn ] [ BBlack ] -> [ action BPlayerOn ] [ ABlack ]
[ action BPlayerOn ] [ BWall ] -> [ action BPlayerOn ] [ AFloor ]
[ action BPlayerOn ] [ BFloor ] -> [ action BPlayerOn ] [ AWall ]
[ action BPlayerOn ] [ APlayerOff ] -> [ BPlayerOff ] [ APlayerOn ]


( players can push walls, and inactive players within )
rigid [ > Player | Wall ] -> [ > Player | > Wall ]
+ rigid [ > Player | PlayerOff ] -> [ > Player | > PlayerOff ]


( after walls are moved, ensure either a floor or wall is in every cell )
late [ APlayerOn ] [ Floor Wall ] -> [ APlayerOn ] [ Wall ]
late [ APlayerOn ] [ no Floor no Wall no Black] -> [ APlayerOn ] [ AFloor ]
late [ BPlayerOn ] [ Floor Wall ] -> [ BPlayerOn ] [ Wall ]
late [ BPlayerOn ] [ no Floor no Wall no Black] -> [ BPlayerOn ] [ BFloor ]


==============
WINCONDITIONS
==============

all APlayer on ATarget
all BPlayer on BTarget
